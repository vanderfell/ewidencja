<% /* ────────────────────────────────────────────────────────
     *  helpers dostępne w samym widoku
     * ──────────────────────────────────────────────────── */ %>
<%
function businessDays(year, month) {
  let count = 0;
  for (let d = new Date(year, month - 1, 1);
       d.getMonth() === month - 1;
       d.setDate(d.getDate() + 1)) {
    if (d.getDay() >= 1 && d.getDay() <= 5) count++;
  }
  return count;
}
const today = new Date().toISOString().slice(0, 10);
const monthNames = [
  'styczeń','luty','marzec','kwiecień','maj','czerwiec',
  'lipiec','sierpień','wrzesień','październik','listopad','grudzień'
];
%>

<!DOCTYPE html>
<html lang="pl">
<head>
<meta charset="UTF-8" />
<title>Profil pracownika</title>
<style>
  body{font-family:sans-serif;margin:0;display:flex;height:100vh}
  .sidebar{width:280px;background:#f5f5f5;overflow-y:auto;
           border-right:1px solid #ccc;padding:1rem}
  .sidebar h2{margin-top:0;font-size:1.2rem}
  .dept{margin-bottom:1rem}
  .dept-header{font-weight:bold;cursor:pointer;padding:.5rem;
               background:#e0e0e0;border-radius:4px}
  .dept-header:hover{background:#d0d0d0}
  .dept-list{list-style:none;margin:.5rem 0 0;padding:0;display:none}
  .dept-list a{display:block;padding:.4rem .8rem;color:#333;
               text-decoration:none;border-radius:4px}
  .dept-list a:hover,
  .dept-list a.active{background:#ddd}
  .content{flex:1;overflow-y:auto;padding:1.5rem}
  table{border-collapse:collapse;width:100%;margin-bottom:1em}
  th,td{border:1px solid #999;padding:8px;text-align:left}
  h1,h2{margin-top:1em}
  .current-contract{background:#f2f2f2}

  /* ─ modal ─ */
  #contract-modal{display:none;position:fixed;inset:0;
                  background:rgba(0,0,0,.5);backdrop-filter:blur(2px);
                  align-items:center;justify-content:center;z-index:9999}
  #contract-modal .box{background:#fff;padding:1.75rem 2rem;border-radius:8px;
                       width:340px;max-width:90%;box-shadow:0 6px 18px rgba(0,0,0,.25)}
  #contract-modal label{display:block;margin-bottom:1rem;font-size:.9rem}
  #contract-modal input{width:100%;padding:.4rem}
  #contract-modal .btns{margin-top:1rem;text-align:right}
  #contract-modal button{padding:.4rem .75rem}
</style>
</head>
<body>

<!-- ========== SIDEBAR ========== -->
<div class="sidebar">
  <h2>Pracownicy według działów</h2>
  <% const byDept = employees.reduce((acc,e)=>{
       const k=e.department||'Bez działu';
       (acc[k]=acc[k]||[]).push(e); return acc;
     },{}); %>
  <% Object.entries(byDept).forEach(([dept,list])=>{ %>
    <div class="dept">
      <div class="dept-header"><%= dept %> (<%= list.length %>)</div>
      <ul class="dept-list"
          <%= list.some(e=>e.id===selectedId) ? 'style="display:block"' : '' %>>
        <% list.forEach(e=>{ %>
          <li>
            <a href="/employees/<%= e.id %>/profile"
               class="<%= e.id===selectedId?'active':'' %>">
              <%= e.full_name %>
            </a>
          </li>
        <% }) %>
      </ul>
    </div>
  <% }) %>
</div>

<!-- ========== CONTENT ========== -->
<div class="content">
<% if (!emp) { %>
  <p>Wybierz pracownika z lewej listy.</p>
<% } else { %>

  <h1><%= emp.full_name %> (ID: <%= emp.id %>)</h1>

  <table>
    <tr><th>Stanowisko</th><td><%= emp.position %></td></tr>
    <tr><th>Dział</th><td><%= emp.department %></td></tr>
    <tr><th>Norma dzienna (h)</th><td><%= emp.daily_norm %></td></tr>
  </table>

  <h2>Podsumowanie miesięczne</h2>
  <table>
    <thead>
      <tr><th>Rok</th><th>Miesiąc</th><th>Norma&nbsp;mies.&nbsp;(h)</th>
          <th>Faktyczne&nbsp;godz.</th><th>Faktyczne&nbsp;dni</th></tr>
    </thead>
    <tbody>
      <% summary.forEach(s=>{ %>
        <tr>
          <td><%= s.year %></td>
          <td><%= monthNames[s.month-1] %></td>
          <td><%= businessDays(s.year,s.month)*emp.daily_norm %></td>
          <td><%= s.hours %></td>
          <td><%= s.days %></td>
        </tr>
      <% }) %>
      <% if(!summary.length){ %>
        <tr><td colspan="5" style="text-align:center">Brak danych</td></tr>
      <% } %>
    </tbody>
  </table>

  <h2>Podsumowanie absencji</h2>
  <table>
    <thead>
      <tr><th>Rok</th><th>Miesiąc</th>
        <% Object.entries(CODE_COLORS).forEach(([c,col])=>{ %>
          <th style="background:<%= col %>"><%= c.toUpperCase() %></th>
        <% }) %>
      </tr>
    </thead>
    <tbody>
      <% absSummary.forEach(a=>{ %>
        <tr>
          <td><%= a.year %></td>
          <td><%= monthNames[a.month-1] %></td>
          <% Object.keys(CODE_COLORS).forEach(code=>{ %>
            <td><%= a[code]||0 %></td>
          <% }) %>
        </tr>
      <% }) %>
      <% if(!absSummary.length){ %>
        <tr>
          <td colspan="<%= 2+Object.keys(CODE_COLORS).length %>"
              style="text-align:center">Brak danych</td>
        </tr>
      <% } %>
    </tbody>
  </table>

  <h2>Umowy</h2>
  <table id="contracts-table">
    <thead>
      <tr><th>Data&nbsp;od</th><th>Data&nbsp;do</th><th>Norma&nbsp;dzienna&nbsp;(h)</th><th></th></tr>
    </thead>
    <tbody>
      <% contracts.forEach(c=>{const cur=c.start_date<=today && (!c.end_date||c.end_date>=today); %>
        <tr data-id="<%= c.id %>" class="<%= cur?'current-contract':'' %>">
          <td><%= c.start_date %></td>
          <td><%= c.end_date||'—' %></td>
          <td><%= c.daily_norm %></td>
          <td><button class="btn-edit-contract" data-id="<%= c.id %>">Edytuj</button></td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <h3>Dodaj nową umowę</h3>
  <form id="add-contract-form">
    <input type="date"   name="start_date" required>
    <input type="date"   name="end_date"   placeholder="bez końca">
    <input type="number" name="daily_norm" step="0.25" value="<%= emp.daily_norm %>" required>
    <button>Dodaj</button>
  </form>

  <h2>Notatki</h2>
  <table>
    <thead><tr><th>Rok</th><th>Miesiąc</th><th>Notatka</th></tr></thead>
    <tbody>
      <% notes.forEach(n=>{ %>
        <tr>
          <td><%= n.year %></td>
          <td><%= monthNames[n.month-1] %></td>
          <td><%= n.note %></td>
        </tr>
      <% }) %>
      <% if(!notes.length){ %>
        <tr><td colspan="3" style="text-align:center">Brak notatek</td></tr>
      <% } %>
    </tbody>
  </table>

<% } /* end emp */ %>
</div><!-- /content -->

<!-- ========== MODAL ========== -->
<div id="contract-modal">
  <div class="box">
    <h3>Edycja umowy</h3>
    <form id="edit-contract-form">
      <input type="hidden" id="contract-id">
      <label>Data od:
        <input id="contract-start" type="date" required>
      </label>
      <label>Data do:
        <input id="contract-end"   type="date">
      </label>
      <label>Norma dzienna (h):
        <input id="contract-norm"  type="number" step="0.25" required>
      </label>
      <div class="btns">
        <button type="button" id="contract-cancel">Anuluj</button>
        <button type="submit">Zapisz</button>
      </div>
    </form>
  </div>
</div>

<!-- ========== SCRIPT ========== -->
<script>
/*-----------------------------------------------------------------------
 *  SPA — ładowanie profili i side-bara bez przeładowania strony
 *---------------------------------------------------------------------*/
(function(){

  /* ---------- rozwijanie / zwijanie działów ---------- */
  document.querySelector('.sidebar').addEventListener('click', e=>{
    const hdr = e.target.closest('.dept-header');
    if(!hdr) return;
    const list = hdr.nextElementSibling;
    list.style.display = list.style.display==='block' ? 'none' : 'block';
  });

  /* ---------- klik w link pracownika ---------- */
  document.querySelector('.sidebar').addEventListener('click', e=>{
    const link = e.target.closest('.dept-list a');
    if(!link) return;
    if(e.ctrlKey||e.metaKey||e.button!==0) return;  // pozwól na normalne otwarcie

    e.preventDefault();
    loadProfile(link.href, link);
  });

  /* back/forward */
  window.addEventListener('popstate', () => loadProfile(location.pathname,null,true));

  async function loadProfile(url, clickedLink, fromPop=false){
    const html = await fetch(url, {headers:{'X-Requested-With':'fetch'}})
                       .then(r=>r.text());
    const tmp  = document.createElement('div');
    tmp.innerHTML = html;

    /* podmień tylko .content (środek) */
    const newContent = tmp.querySelector('.content');
    document.querySelector('.content').innerHTML = newContent.innerHTML;

    /* podmień klasę active w sidebarze */
    document.querySelectorAll('.dept-list a').forEach(a=>a.classList.remove('active'));
    if(clickedLink) clickedLink.classList.add('active');
    else{
      // po popstate: zaznacz link odpowiadający aktualnemu ID
      const id = +url.split('/')[2];
      const a = document.querySelector(`.dept-list a[href="/employees/${id}/profile"]`);
      if(a){ a.classList.add('active'); a.closest('.dept-list').style.display='block'; }
    }

    /* aktualizuj URL */
    if(!fromPop) history.pushState(null,'',url);

    /* zainicjuj sekcję umów we wczytanym fragmencie */
    initContractsSection();
  }

  /*-------------------------------------------------------------------
   *  Umowy – dodanie / edytowanie
   *-----------------------------------------------------------------*/
  function initContractsSection(){
    const tbl      = document.getElementById('contracts-table');
    const addForm  = document.getElementById('add-contract-form');
    const modal    = document.getElementById('contract-modal');
    const editForm = document.getElementById('edit-contract-form');
    if(!tbl) return;                    // brak pracownika – nic do inicjalizacji

    const empId = +(<%= emp ? emp.id : '0' %>);

    /* ----- otwarcie modala ----- */
    tbl.addEventListener('click', e=>{
      const btn = e.target.closest('.btn-edit-contract');
      if(!btn) return;
      const id  = +btn.dataset.id;
      const row = tbl.querySelector(`tr[data-id="${id}"]`);
      if(!row) return;

      editForm.querySelector('#contract-id').value   = id;
      editForm.querySelector('#contract-start').value= row.children[0].textContent.trim();
      const endTxt=row.children[1].textContent.trim();
      editForm.querySelector('#contract-end').value  = endTxt==='—'?'' : endTxt;
      editForm.querySelector('#contract-norm').value = row.children[2].textContent.trim();
      modal.style.display='flex';
    });

    /* ----- zamknięcie modala ----- */
    document.getElementById('contract-cancel')
      .addEventListener('click', ()=> modal.style.display='none');
    modal.addEventListener('click', e=>{
      if(e.target===modal) modal.style.display='none';
    });

    /* ----- PUT (zapis edycji) ----- */
    editForm.addEventListener('submit', async e=>{
      e.preventDefault();
      const id = editForm.querySelector('#contract-id').value;
      const payload = {
        start_date: editForm.querySelector('#contract-start').value,
        end_date  : editForm.querySelector('#contract-end').value,
        daily_norm: editForm.querySelector('#contract-norm').value
      };
      const js = await fetch(`/api/contracts/${id}`,{
        method:'PUT', headers:{'Content-Type':'application/json'},
        body:JSON.stringify(payload)
      }).then(r=>r.json());
      if(js.ok) loadProfile(location.pathname,null,true);
      else alert('Błąd: '+js.message);
    });

    /* ----- POST (dodanie) ----- */
    addForm.addEventListener('submit', async e=>{
      e.preventDefault();
      const payload = {
        emp_id    : empId,
        start_date: addForm.start_date.value,
        end_date  : addForm.end_date.value,
        daily_norm: addForm.daily_norm.value
      };
      const js = await fetch('/api/contracts',{
        method:'POST', headers:{'Content-Type':'application/json'},
        body:JSON.stringify(payload)
      }).then(r=>r.json());
      if(js.ok) loadProfile(location.pathname,null,true);
      else alert('Błąd: '+js.message);
    });
  }

  /* pierwsza inicjalizacja po załadowaniu widoku */
  initContractsSection();

})();
</script>
</body>
</html>
