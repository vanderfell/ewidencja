<%
// helper: liczba dni roboczych (pon–pt) w miesiącu
function businessDays(year, month) {
  let count = 0;
  // miesiąc w JS liczymy od 0
  for (let d = new Date(year, month-1, 1); d.getMonth() === month-1; d.setDate(d.getDate() + 1)) {
    const wd = d.getDay();
    if (wd >= 1 && wd <= 5) count++;
  }
  return count;
}
%>
<% 
  // Dziś w formacie YYYY-MM-DD
  const today = new Date().toISOString().slice(0,10);
%>

  
<html lang="pl">
<head>
  <meta charset="UTF-8" />
  <title>Profil pracownika</title>
  <style>
    body { font-family: sans-serif; margin: 0; display: flex; height: 100vh; }
    /* Sidebar */
    .sidebar { width: 280px; background: #f5f5f5; overflow-y: auto; border-right: 1px solid #ccc; padding: 1rem; }
    .sidebar h2 { margin-top: 0; font-size: 1.2rem; }
    .dept { margin-bottom: 1rem; }
    .dept-header { font-weight: bold; cursor: pointer; padding: 0.5rem; background: #e0e0e0; border-radius: 4px; }
    .dept-header:hover { background: #d0d0d0; }
    .dept-list { list-style: none; margin: 0.5rem 0 0; padding: 0; display: none; }
    .dept-list li { margin: 0; }
    .dept-list a { display: block; padding: 0.4rem 0.8rem; color: #333; text-decoration: none; border-radius: 4px; }
    .dept-list a:hover, .dept-list a.active { background: #ddd; }
    /* Content */
    .content { flex: 1; padding: 1.5rem; overflow-y: auto; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }
    th, td { border: 1px solid #999; padding: 8px; text-align: left; }
    h1, h2 { margin-top: 1em; }
    /* Podświetlenie bieżącej umowy */
.current-contract {
  background-color: #f2f2f2;
}

  </style>
</head>
<body>
  <div class="sidebar">
    <h2>Pracownicy według działów</h2>
    <% const byDept = employees.reduce((acc, e) => {
         const deptKey = e.department || 'Bez działu';
         (acc[deptKey] = acc[deptKey]||[]).push(e);
         return acc;
       }, {}); %>
    <% Object.entries(byDept).forEach(([dept, list]) => { %>
      <div class="dept">
        <div class="dept-header"><%= dept %> (<%= list.length %>)</div>
        <ul class="dept-list" <%= list.some(e=>e.id===selectedId) ? 'style="display:block;"' : '' %>>
          <% list.forEach(e => { %>
            <li>
              <a href="/employees/<%= e.id %>/profile" class="<%= e.id === selectedId ? 'active' : '' %>">
                <%= e.full_name %>
              </a>
            </li>
          <% }) %>
        </ul>
      </div>
    <% }) %>
  </div>

  <div class="content">
    <% if (!emp) { %>
      <p>Wybierz pracownika z lewej listy.</p>
    <% } else { %>
      <% // tablica nazw miesięcy %>
      <% const monthNames = [
           'styczeń','luty','marzec','kwiecień','maj','czerwiec',
           'lipiec','sierpień','wrzesień','październik','listopad','grudzień'
         ];
      %>

      <h1><%= emp.full_name %> (ID: <%= emp.id %>)</h1>

      <table>
        <tr><th>Stanowisko</th><td><%= emp.position %></td></tr>
        <tr><th>Dział</th><td><%= emp.department %></td></tr>
        <tr><th>Norma dzienna (h)</th><td><%= emp.daily_norm %></td></tr>
      </table>

      <h2>Podsumowanie miesięczne</h2>
<table>
  <thead>
    <tr>
      <th>Rok</th>
      <th>Miesiąc</th>
      <th>Norma mies. (h)</th>
      <th>Faktyczne godz.</th>
      <th>Faktyczne dni</th>
    </tr>
  </thead>
  <tbody>
    <% summary.forEach(s => { %>
      <tr>
        <td><%= s.year %></td>
        <td><%= monthNames[s.month - 1] %></td>
        <!-- norma mies.: liczba dni roboczych * norma dzienna pracownika -->
        <td>
          <%= businessDays(s.year, s.month) * emp.daily_norm %>
        </td>
        <td><%= s.hours %></td>
        <td><%= s.days %></td>
      </tr>
    <% }) %>
    <% if (!summary.length) { %>
      <tr>
        <td colspan="5" style="text-align:center;">Brak danych</td>
      </tr>
    <% } %>
  </tbody>
</table>


      <h2>Podsumowanie absencji</h2>
      <table>
        <thead>
          <tr>
            <th>Rok</th>
            <th>Miesiąc</th>
            <% Object.entries(CODE_COLORS).forEach(([code,color]) => { %>
              <th style="background:<%= color %>; color:#000;"><%= code.toUpperCase() %></th>
            <% }) %>
          </tr>
        </thead>
        <tbody>
          <% absSummary.forEach(a => { %>
            <tr>
              <td><%= a.year %></td>
              <td><%= monthNames[a.month - 1] %></td>
              <% Object.keys(CODE_COLORS).forEach(code => { %>
                <td><%= a[code] || 0 %></td>
              <% }) %>
            </tr>
          <% }) %>
          <% if (!absSummary.length) { %>
            <tr>
              <td colspan="<%= 2 + Object.keys(CODE_COLORS).length %>" style="text-align:center;">
                Brak danych
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
      
      
      <h2>Umowy</h2>
<table id="contracts-table">
  <thead>
    <tr><th>Data od</th><th>Data do</th><th>Norma dzienna (h)</th><th></th></tr>
  </thead>
  <tbody>
    <% contracts.forEach(c => {
         // czy dziś mieści się w przedziale [start, end]
         const isCurrent = c.start_date <= today && (!c.end_date || c.end_date >= today);
    %>
      <tr data-id="<%= c.id %>" class="<%= isCurrent ? 'current-contract' : '' %>">
        <td><%= c.start_date %></td>
        <td><%= c.end_date || '—' %></td>
        <td><%= c.daily_norm %></td>
        <td><button class="btn-edit-contract" data-id="<%=c.id%>">Edytuj</button></td>
      </tr>
    <% }) %>
  </tbody>
</table>

<h3>Dodaj nową umowę</h3>
<form id="add-contract-form">
  <input type="date"   name="start_date" required>
  <input type="date"   name="end_date"   placeholder="bez końca">
  <input type="number" name="daily_norm" step="0.25" value="8" required>
  <button>Dodaj</button>
</form>
<h2>Notatki</h2>
      <table>
        <thead>
          <tr><th>Rok</th><th>Miesiąc</th><th>Notatka</th></tr>
        </thead>
        <tbody>
          <% notes.forEach(n => { %>
            <tr>
              <td><%= n.year %></td>
              <td><%= monthNames[n.month - 1] %></td>
              <td><%= n.note %></td>
            </tr>
          <% }) %>
          <% if (!notes.length) { %>
            <tr>
              <td colspan="3" style="text-align:center;">Brak notatek</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    <% } %>
  </div>
  
  </div>
</div>

<script>
;(function(){
  const container = document.querySelector('.content');
  const modal     = document.getElementById('contract-modal');
  const form      = document.getElementById('edit-contract-form');

  // Otwarcie modala
  container.addEventListener('click', e => {
    if (!e.target.matches('.btn-edit-contract')) return;
    const id  = e.target.dataset.id;
    const row = container.querySelector(`tr[data-id="${id}"]`);
    document.getElementById('contract-id').value    = id;
    document.getElementById('contract-start').value = row.children[0].textContent;
    document.getElementById('contract-end').value   = row.children[1].textContent !== '—' ? row.children[1].textContent : '';
    document.getElementById('contract-norm').value  = row.children[2].textContent;
    modal.style.display = 'flex';
  });

  // Zamknięcie modala
  document.getElementById('modal-cancel').addEventListener('click', () => {
    modal.style.display = 'none';
  });

  // Zapis zmian
  form.addEventListener('submit', async e => {
    e.preventDefault();
    const id = form.id.value;
    const sd = form.start_date.value;
    const ed = form.end_date.value;
    const dn = form.daily_norm.value;
    const res = await fetch('/api/contracts/' + id, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ start_date: sd, end_date: ed, daily_norm: dn })
    });
    const js = await res.json();
    if (js.ok) location.reload();
    else alert('Błąd: ' + js.message);
  });
})();
</script>

      

  <script>
    // sidebar
    const sidebar = document.querySelector('.sidebar');
    sidebar.addEventListener('click', e => {
      const header = e.target.closest('.dept-header');
      if (header) {
        const list = header.nextElementSibling;
        list.style.display = list.style.display === 'block' ? 'none' : 'block';
      }
    });

    // AJAX load profile
    document.querySelectorAll('.dept-list a').forEach(link => {
      link.addEventListener('click', async e => {
        e.preventDefault();
        const url = link.href;
        history.pushState(null,'',url);
        const html = await (await fetch(url)).text();
        const tmp = document.createElement('div');
        tmp.innerHTML = html;
        document.querySelector('.content').innerHTML =
          tmp.querySelector('.content').innerHTML;
        // odśwież aktywną klasę i rozwinięcie...
      });
    });

    window.addEventListener('popstate', () => location.reload());
  </script>
</body>
</html>
