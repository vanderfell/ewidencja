<% /*  ───────────────────────────────────────────────
     *  profile_inner.ejs  (fragment do zakładki „Pracownicy”)
     * ─────────────────────────────────────────── */ %>

<%
// helper: liczba dni roboczych (pon–pt) w miesiącu
function businessDays(y,m){
  let c=0; for(let d=new Date(y,m-1,1);d.getMonth()===m-1;d.setDate(d.getDate()+1))
    if(d.getDay()>=1&&d.getDay()<=5) c++; return c;
}
const today = new Date().toISOString().slice(0,10);
const M = ['styczeń','luty','marzec','kwiecień','maj','czerwiec',
           'lipiec','sierpień','wrzesień','październik','listopad','grudzień'];
%>

<div class="sidebar">
  <h2>Pracownicy według działów</h2>
  <% const byDept = employees.reduce((a,e)=>{
       const k=e.department||'Bez działu'; (a[k]=a[k]||[]).push(e); return a;
     },{}); %>
  <% Object.entries(byDept).forEach(([dept,list])=>{ %>
    <div class="dept">
      <div class="dept-header"><%= dept %> (<%= list.length %>)</div>
      <ul class="dept-list" <%= list.some(e=>e.id===selectedId)?'style="display:block"':'' %>>
        <% list.forEach(e=>{ %>
          <li>
            <a href="/employees/<%= e.id %>/profile"
               class="<%= e.id===selectedId?'active':'' %>"><%= e.full_name %></a>
          </li>
        <% }) %>
      </ul>
    </div>
  <% }) %>
</div>

<div class="content profile-content">
<% if(!emp){ %>
  <p>Wybierz pracownika z lewej listy.</p>
<% }else{ %>

  <h1><%= emp.full_name %></h1>

  <table>
    <tr><th>Stanowisko</th><td><%= emp.position %></td></tr>
    <tr><th>Dział</th><td><%= emp.department %></td></tr>
    <tr><th>Norma dzienna (h)</th><td><%= emp.daily_norm %></td></tr>
    <tr><th>Numer ewidencyjny</th><td><%= emp.payroll_number %></td></tr>
  </table>

  <!-- Przycisk Edycji i Usuwania -->
  <div style="margin:1.2em 0 2em 0;">
    <button type="button"
      id="btn-edit-employee"
      data-id="<%= emp.id %>"
      data-full-name="<%= emp.full_name %>"
      data-position="<%= emp.position || '' %>"
      data-payroll-number="<%= emp.payroll_number || '' %>"
      data-daily-norm="<%= emp.daily_norm || '' %>"
      data-department="<%= emp.department || 'Obsługa' %>"
      style="padding:.45em 1.4em;margin-right:0.7em;">Edytuj pracownika</button>
    <button type="button"
      id="btn-delete-employee"
      data-id="<%= emp.id %>"
      style="padding:.45em 1.4em;background:#f55;color:#fff;">Usuń pracownika</button>
  </div>

  <h2>Podsumowanie miesięczne</h2>
  <table>
    <thead><tr><th>Rok</th><th>Miesiąc</th><th>Norma&nbsp;(h)</th>
                <th>Faktyczne&nbsp;godz.</th><th>Faktyczne&nbsp;dni</th></tr></thead>
    <tbody>
      <% summary.forEach(s=>{ %>
        <tr>
          <td><%= s.year %></td>
          <td><%= M[s.month-1] %></td>
          <td><%= businessDays(s.year,s.month)*emp.daily_norm %></td>
          <td><%= s.hours %></td><td><%= s.days %></td>
        </tr>
      <% }) %>
      <% if(!summary.length){ %>
        <tr><td colspan="5" style="text-align:center">Brak danych</td></tr>
      <% } %>
    </tbody>
  </table>

  <h2>Podsumowanie absencji</h2>
  <table>
    <thead>
      <tr><th>Rok</th><th>Miesiąc</th>
        <% Object.entries(CODE_COLORS).forEach(([c,col])=>{ %>
          <th style="background:<%= col %>"><%= c.toUpperCase() %></th>
        <% }) %>
      </tr>
    </thead>
    <tbody>
      <% absSummary.forEach(a=>{ %>
        <tr>
          <td><%= a.year %></td><td><%= M[a.month-1] %></td>
          <% Object.keys(CODE_COLORS).forEach(k=>{ %>
            <td><%= a[k]||0 %></td>
          <% }) %>
        </tr>
      <% }) %>
      <% if(!absSummary.length){ %>
        <tr><td colspan="<%= 2+Object.keys(CODE_COLORS).length %>"
            style="text-align:center">Brak danych</td></tr>
      <% } %>
    </tbody>
  </table>

  <!-- ========== UMOWY ========== -->
  <h2>Umowy</h2>
  <table id="contracts-table">
    <thead><tr><th>Data&nbsp;od</th><th>Data&nbsp;do</th><th>Norma&nbsp;(h)</th><th></th></tr></thead>
    <tbody>
      <% contracts.forEach(c=>{
           const cur=c.start_date<=today && (!c.end_date||c.end_date>=today); %>
        <tr data-id="<%= c.id %>" class="<%= cur?'current-contract':'' %>">
          <td><%= c.start_date %></td>
          <td><%= c.end_date||'—' %></td>
          <td><%= c.daily_norm %></td>
          <td><button class="btn-edit-contract" data-id="<%= c.id %>">Edytuj</button></td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <h3>Dodaj nową umowę</h3>
  <form id="add-contract-form">
    <input type="date"   name="start_date" required>
    <input type="date"   name="end_date">
    <input type="number" name="daily_norm" step="0.25" value="<%= emp.daily_norm %>" required>
    <button>Dodaj</button>
  </form>

  <h2>Notatki</h2>
  <table>
    <thead><tr><th>Rok</th><th>Miesiąc</th><th>Notatka</th></tr></thead>
    <tbody>
      <% notes.forEach(n=>{ %>
        <tr><td><%= n.year %></td><td><%= M[n.month-1] %></td><td><%= n.note %></td></tr>
      <% }) %>
      <% if(!notes.length){ %>
        <tr><td colspan="3" style="text-align:center">Brak notatek</td></tr>
      <% } %>
    </tbody>
  </table>

<% } /* end emp */ %>
</div><!-- /.profile-content -->

<!-- ==========  MODAL EDYCJI PRACOWNIKA  ========== -->
<div id="emp-edit-modal" class="modal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);align-items:center;justify-content:center;z-index:10000;">
  <div class="modal-content" style="background:#fff;padding:1.5rem;border-radius:8px;width:350px;position:relative;">
    <h3 style="margin-top:0">Edycja pracownika</h3>
    <form id="emp-edit-form">
      <input type="hidden" name="emp_id" id="emp_id" value="">
      <label>Imię i nazwisko:<br>
        <input type="text" name="full_name" id="emp_full_name" required>
      </label><br>
      <label>Stanowisko:<br>
        <input type="text" name="position" id="emp_position">
      </label><br>
      <label>Numer ewidencyjny:<br>
        <input type="text" name="payroll_number" id="emp_payroll_number">
      </label><br>
      <label>Norma dzienna (h):<br>
        <input type="number" step="0.25" name="daily_norm" id="emp_daily_norm" required>
      </label><br>
      <label>Dział:<br>
        <select name="department" id="emp_department" required>
          <option value="Obsługa">Obsługa</option>
          <option value="Nauczyciel">Nauczyciel</option>
        </select>
      </label>
      <div style="text-align:right; margin-top:1em;">
        <button type="button" id="emp-cancel" style="margin-right:.6em;">Anuluj</button>
        <button type="button" id="emp-delete" style="margin-right:.6em;background:#f33;color:#fff;">Usuń</button>
        <button type="submit" style="background:#007bff;color:#fff;">Zapisz zmiany</button>
      </div>
    </form>
  </div>
</div>

<script>
/*  profile_inner – logika SPA dla zakładki „Pracownicy”  */
document.addEventListener('DOMContentLoaded', () => {

  // ======== SIDEBAR: rozwijanie działów, ajax reload profilu ========
  const container = document.getElementById('employees-container');
  if (!container) return;

  const sidebar = container.querySelector('.sidebar');
  let   content = container.querySelector('.profile-content');

  // Rozwijanie działów
  sidebar.addEventListener('click', e => {
    const hdr = e.target.closest('.dept-header'); if (!hdr) return;
    e.stopPropagation();
    const list = hdr.nextElementSibling; if (!list) return;
    list.style.display = list.style.display === 'block' ? 'none' : 'block';
  });

  // Klik w nazwisko → ajax profil
  sidebar.addEventListener('click', async e => {
    const a = e.target.closest('a[href^="/employees/"]'); if (!a) return;
    if (e.ctrlKey || e.metaKey || e.button !== 0) return;
    e.preventDefault();

    const html  = await fetch(a.href, { headers:{'X-Requested-With':'fetch'} })
                    .then(r => r.text());
    const tmp   = document.createElement('div'); tmp.innerHTML = html;
    const fresh = tmp.querySelector('.profile-content'); if (!fresh) return;

    content.replaceWith(fresh);
    content = fresh;
    sidebar.querySelectorAll('a').forEach(l => l.classList.remove('active'));
    a.classList.add('active');
    if (history.state?.url !== a.href) history.pushState({ url: a.href }, '', a.href);
    initContractSection(fresh); // <--- po reloadzie ajax podpina eventy do sekcji umów
    attachEmpModalEvents();     // <--- podpina modal do nowo wczytanej treści
  });

  // Back / forward w historii przeglądarki
  window.addEventListener('popstate', e => {
    if (!e.state?.url) return;
    fetch(e.state.url, { headers:{'X-Requested-With':'fetch'} })
      .then(r => r.text()).then(html=>{
        const tmp = document.createElement('div'); tmp.innerHTML = html;
        const fresh = tmp.querySelector('.profile-content');
        if (fresh) {
          content.replaceWith(fresh);
          content = fresh;
          initContractSection(fresh);
          attachEmpModalEvents();
        }
      });
  });

  // ======== MODAL EDYCJI PRACOWNIKA (pełna logika i podpinanie eventów) ========
  function openEditModal(emp) {
    document.getElementById('emp_id').value            = emp.id;
    document.getElementById('emp_full_name').value     = emp.fullName;
    document.getElementById('emp_position').value      = emp.position || '';
    document.getElementById('emp_payroll_number').value= emp.payrollNumber || '';
    document.getElementById('emp_daily_norm').value    = emp.dailyNorm || '';
    document.getElementById('emp_department').value    = emp.department || 'Obsługa';
    document.getElementById('emp-edit-modal').style.display = 'flex';
  }
  function closeEditModal() {
    document.getElementById('emp-edit-modal').style.display = 'none';
  }
  function attachEmpModalEvents() {
    // Przycisk Edytuj
    document.getElementById('btn-edit-employee')?.addEventListener('click', function() {
      openEditModal({
        id: this.dataset.id,
        fullName: this.dataset.fullName,
        position: this.dataset.position,
        payrollNumber: this.dataset.payrollNumber,
        dailyNorm: this.dataset.dailyNorm,
        department: this.dataset.department
      });
    });
    // Przycisk Usuń
    document.getElementById('btn-delete-employee')?.addEventListener('click', async function() {
      const empId = this.dataset.id;
      if (!empId) return;
      if (!confirm('Na pewno usunąć tego pracownika?')) return;
      const resp = await fetch(`/api/employees/${empId}`, { method: 'DELETE' });
      const js = await resp.json();
      if (js.ok) location.reload();
      else alert('Błąd usuwania: ' + (js.message || ''));
    });
    // Modal - przyciski
    document.getElementById('emp-cancel').onclick = closeEditModal;
    document.getElementById('emp-edit-modal').onclick = function(e) {
      if (e.target === this) closeEditModal();
    };
    document.getElementById('emp-delete').onclick = async function() {
      const empId = document.getElementById('emp_id').value;
      if (!empId) return;
      if (!confirm('Na pewno usunąć tego pracownika?')) return;
      const resp = await fetch(`/api/employees/${empId}`, { method: 'DELETE' });
      const js = await resp.json();
      if (js.ok) location.reload();
      else alert('Błąd usuwania: ' + (js.message || ''));
    };
    document.getElementById('emp-edit-form').onsubmit = async function(ev) {
      ev.preventDefault();
      const empId = document.getElementById('emp_id').value;
      const payload = {
        full_name      : document.getElementById('emp_full_name').value.trim(),
        position       : document.getElementById('emp_position').value.trim(),
        payroll_number : document.getElementById('emp_payroll_number').value.trim(),
        daily_norm     : parseFloat(document.getElementById('emp_daily_norm').value),
        department     : document.getElementById('emp_department').value
      };
      const resp = await fetch(`/api/employees/${empId}`, {
        method : 'PUT',
        headers: { 'Content-Type':'application/json' },
        body   : JSON.stringify(payload)
      });
      const js = await resp.json();
      if (js.ok) {
        closeEditModal();
        location.reload();
      } else {
        alert('Błąd zapisu: ' + (js.message || ''));
      }
    };
  }
  attachEmpModalEvents();

  // ======== SEKCJA UMÓW (dodawanie, edycja przez popup) ========
  function initContractSection(scope = document) {
    const tbl   = scope.querySelector('#contracts-table');
    const addF  = scope.querySelector('#add-contract-form');
    const active = sidebar.querySelector('a.active');
    const empId  = active ? +active.href.match(/\/employees\/(\d+)\//)[1] : 0;
    if (!tbl) return;

    // Modal (tworzony raz, jeśli nie istnieje w DOM)
    const modal = document.getElementById('contract-modal') || createModalSkeleton();
    const eForm = modal.querySelector('#edit-contract-form');

    async function reloadProfile() {
      const url  = `/employees/${empId}/profile`;
      const html = await fetch(url).then(r => r.text());
      const tmp  = document.createElement('div'); tmp.innerHTML = html;
      const fresh = tmp.querySelector('.profile-content');
      if (fresh) {
        content.replaceWith(fresh);
        content = fresh;
        initContractSection(fresh);
        attachEmpModalEvents();
      }
    }

    // OTWARCIE MODALA
    tbl.addEventListener('click', e => {
      const btn = e.target.closest('.btn-edit-contract'); if (!btn) return;
      const id  = +btn.dataset.id;
      const row = tbl.querySelector(`tr[data-id="${id}"]`);
      eForm.elements.id.value = id;
      eForm.start_date.value  = row.children[0].textContent.trim();
      const end               = row.children[1].textContent.trim();
      eForm.end_date.value    = end === '—' ? '' : end;
      eForm.daily_norm.value  = row.children[2].textContent.trim();
      modal.style.display = 'flex';
    });

    // ZAPIS EDYCJI
    eForm.onsubmit = async ev => {
      ev.preventDefault();
      const id = eForm.elements.id.value;
      const payload = {
        start_date : eForm.start_date.value,
        end_date   : eForm.end_date.value,
        daily_norm : eForm.daily_norm.value
      };
      const js = await fetch(`/api/contracts/${id}`, {
        method  : 'PUT',
        headers : { 'Content-Type':'application/json' },
        body    : JSON.stringify(payload)
      }).then(r => r.json());

      if (js.ok) {
        modal.style.display = 'none';
        await reloadProfile();
      } else alert('Błąd: ' + js.message);
    };
    modal.querySelector('#contract-cancel').onclick = () => modal.style.display = 'none';
    modal.onclick = e => { if (e.target === modal) modal.style.display = 'none'; };

    // DODAWANIE NOWEJ UMOWY
    addF.onsubmit = async ev => {
      ev.preventDefault();
      const payload = {
        emp_id     : empId,
        start_date : addF.start_date.value,
        end_date   : addF.end_date.value,
        daily_norm : addF.daily_norm.value
      };
      const js = await fetch('/api/contracts', {
        method  : 'POST',
        headers : { 'Content-Type':'application/json' },
        body    : JSON.stringify(payload)
      }).then(r => r.json());

      if (js.ok) {
        addF.reset();
        await reloadProfile();
      } else alert('Błąd: ' + js.message);
    };
  }
  // Modal skeleton dla sekcji Umowy
  function createModalSkeleton() {
    const div = document.createElement('div');
    div.id = 'contract-modal';
    div.innerHTML = `
      <div class="box">
        <h3>Edycja umowy</h3>
        <form id="edit-contract-form">
          <input type="hidden" name="id">
          <label>Data od:<input name="start_date" type="date" required></label>
          <label>Data do:<input name="end_date" type="date"></label>
          <label>Norma dzienna (h):<input name="daily_norm" type="number" step="0.25" required></label>
          <div class="btns">
            <button type="button" id="contract-cancel">Anuluj</button>
            <button>Zapisz</button>
          </div>
        </form>
      </div>`;
    document.body.appendChild(div);
    return div;
  }
  // Od razu init na starcie
  initContractSection();

});
</script>
